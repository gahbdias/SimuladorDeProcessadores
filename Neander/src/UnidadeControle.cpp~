/**
 * @file ParteControle.cpp
 * @authors Karine Piacentini Coelho, Gabriela Carvalho Dias.
 * @brief  Simulador de modelos Parte de Controle (PC) - Parte Operativa (PO)
 * @version 1.00
 * @date 06-04-2019
 * 
 * @copyright Copyright (c) 2019
 * 
 */

#include "../include/ParteControle.h"
#include "../include/ParteOperativa.h"
#include "../include/ULA.h"
#include "../include/RI.h"

#include <thread>
#include <chrono>
#include <iostream>

ParteControle::ParteControle ( ) {
	this->atual = 1; // começa no estado 0
	this->proximo = 0; // será definido posteriormente (apenas para não ser inicializado com lixo)
	this->clock_ = 0; // tempo 0 ???????????????
	this->fim=false; // controlado pelo HLT
}


int ParteControle::fte( int atual ){ // Função de Transição de Estados ~ define qual será o próximo estado

  switch(atual){

  case 1:
    proximo = 2;
    break;

  case 2:
   
    if( opcode == NOP ){
      proximo = 1;

    }
    else if( (opcode == STA) or (opcode == LDA) or (opcode == ADD) or (opcode == OR) or (opcode == AND) ) { 
      proximo = 3;

    } else if( opcode == NOT ) { 
      proximo = 13;
    }
    else if( (opcode == JMP) or ( (opcode == JN) and (PO.ULA.N == true) ) or ( (opcode == JZ) and (PO.ULA.Z == true) ) ) { 
      proximo = 14;

    } else if( ( (opcode == JN) and (PO.ULA.N == false) ) or ( (opcode == JZ) and (PO.ULA.Z == false) ) ) { 
      proximo = 15;

    } else if( opcode == HLT ) { 
      fim = true;

    } else {
      // erro
      std::cout << "OPCODE inválido." << std::endl;
    }

    break;

  case 3:
    proximo = 4;
    break;

  case 4:

    if( opcode == STA ) {
      proximo = 5;

    } else if(opcode == LDA) {
      proximo = 7;

    } else if( (opcode == ADD) or (opcode == OR) or (opcode == AND) ) {
      proximo = 10;

    } else {
      std::cout << "OPCODE inválido." << std::endl;
    }

    break;

  case 5:
    proximo = 6;
    break;

  case 6:
    proximo = 1;
    break;

  case 7:
    proximo = 8;
    break;

  case 8:
    proximo = 9;
    break;

  case 9:
    proximo = 1;
    break;

  case 10:
    proximo = 11;
    break;

  case 11:	
    proximo = 12;
   break;

  case 12:
    proximo = 1;
    break;

  case 13:
    proximo = 1;
    break;

  case 14:
    proximo = 1;
    break;

  case 15:
    proximo = 1;
    break;

  default: std::cout << "\n### Entrada inválida fte ###" << std::endl;

  }

  return proximo;
}

void ParteControle::fs ( int atual ) { // Função de saída ~ recebe o estado atual e controla as operações (chama as funções da PO)

	double valor;

	std::cout << std::endl;
	std::cout << "Clocks decorridos:" << clock_ << std::endl;


	switch(atual){

		case 1: 
			std::cout << "### ESTADO 1 ###" << std::endl;

		break;

		case 2: 
			std::cout << "### ESTADO 2 ###" << std::endl;
			
		break;

		case 3:
			std::cout << "### ESTADO 3 ###" << std::endl;
			
		break;

		case 4: 
			std::cout << "### ESTADO 4 ###" << std::endl;
			
		break;

		case 5:
			std::cout << "### ESTADO 5 ###" << std::endl;
		
		break;

		case 6: 
			std::cout << "### ESTADO 6 ###" << std::endl;

		break;

		case 7: 
			std::cout << "### ESTADO 7 ###" << std::endl;
			
		break;

		case 8: 
			std::cout << "### ESTADO 8 ###" << std::endl;
			
		break;

		case 9: 
			std::cout << "### ESTADO 9 ###" << std::endl;
			
		break;

		case 10: 
			std::cout << "### ESTADO 10 ###" << std::endl;
			
		break;

		case 11:
			std::cout << "### ESTADO 11 ###" << std::endl;
		break;

		case 12: 
			std::cout << "### ESTADO 12 ###" << std::endl;
			
		break;

		case 13:
			std::cout << "### ESTADO 13 ###" << std::endl;
			
		break;

		case 14: 
			std::cout << "### ESTADO 14 ###" << std::endl;
		break;

		case 15: 
			std::cout << "### ESTADO 15 ###" << std::endl;
			
		break;

		default: std::cout << "\n### Entrada inválida fs ###" << std::endl;

	}
		std::cout << std::endl;


}

